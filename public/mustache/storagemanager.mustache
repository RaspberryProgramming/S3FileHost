 <!doctype html>
 <html>

 <head>
         <meta name="viewport" content="width=device-width" />
 </head>

 <body>

         <div class="togglebar" id="togglebar">
                 <div class="previous" onclick="window.location.href='{{previous}}'"><img class="previous"
                                 src="/images/previous.png"></div>
                 <button id="tooltoggle" class="tooltoggle">Toggle</button>
         </div>
         <div class="content">

                 <div class="files">{{{files}}}</div>
                 <div class="tools" id="tools">
                         <div id="toolset" class="toolset">
                                 <p>Upload</p>
                                 <form class="tool-form" id="upload-form" enctype="multipart/form-data" method="post"
                                         action="/upload{{path}}">
                                         <input class="button" id="fileupload" name="myfile" type="file" />
                                 </form>

                                 <input class="search" id="search" type="text" placeholder="Search..">

                                 <p>Create Folder</p>
                                 <form class="tool-form" id="upload-form" enctype="multipart/form-data" method="post"
                                         action="/upload{{path}}">
                                         <input class="button" id="create-folder" name="folder" type="text"
                                                 placeholder="Folder Name" />
                                 </form>

                                 <p>
                                         <p>File Options:</p>
                                         <button onclick="preview()">Preview</button>
                                         <button onclick="edit()">Edit</button>
                                         <button onclick="download()">Download</button>
                         </div>
                 </div>
 </body>
 </html>
 <script>
         function preview() {
                 let selected = document.getElementsByClassName("selected");
                 for (i in selected) {
                         if (selected[i].classList) {
                                 let path = window.location.pathname;
                                 path = path.split("/download")[path.split.length - 1];
                                 window.location.href = "/preview-page" + path + "/" + selected[i].id;
                         }
                 }
         }

         function edit() {
                 let selected = document.getElementsByClassName("selected");
                 for (i in selected) {
                         if (selected[i].classList) {
                                 let path = window.location.pathname;
                                 path = path.split("/download");
                                 path = path[path.length - 1];
                                 if (path === "/"){
                                         path = "";
                                 }
                                 window.location.href = "/editor" + path + "/" + selected[i].id;
                         }
                 }
         }

         function download() {
                 let selected = document.getElementsByClassName("selected");
                 for (i in selected) {
                         if (selected[i].classList) {
                                 let path = window.location.pathname;
                                 path = path.split("/download")[path.split.length - 1];
                                 window.location.href = "/download" + path + "/" + selected[i].id;
                         }
                 }
         }

         function select(id, path) {
                 let selected = document.getElementsByClassName("selected");
                 for (i in selected) {
                         if (selected[i].classList) {
                                 selected[i].classList.remove("selected");
                         }
                 }
                 if (!document.getElementById(id).classList.contains("selected")) {
                         document.getElementById(id).classList = "selected " + document.getElementById(id).classList;
                 }

         }

         document.getElementById("tooltoggle").onclick = function () {
                 let toolset = document.getElementById("toolset");
                 if (toolset.style.display === "flex") {
                         toolset.style.display = "none";

                 } else {
                         toolset.style.display = "flex";
                 }
                 console.log(toolset);
         }
         document.getElementById("fileupload").onchange = function () {
                 document.getElementById("upload-form").submit();
         };
         document.getElementById("search").onchange = function () {
                 console.log("Searching");
         };
 </script>
 <script src="https://cdn.jsdelivr.net/npm/vanilla-lazyload@12.4.0/dist/lazyload.min.js"></script>
 <script>
         (function () {
                 function logElementEvent(eventName, element) {
                         console.log(
                                 Date.now(),
                                 eventName,
                                 element.getAttribute("data-src")
                         );
                 }

                 var callback_enter = function (element) {
                         logElementEvent("üîë ENTERED", element);
                 };
                 var callback_exit = function (element) {
                         element.style.visibility = "hidden";
                         logElementEvent("üö™ EXITED", element);
                 };
                 var callback_reveal = function (element) {
                         logElementEvent("üëÅÔ∏è REVEALED", element);
                 };
                 var callback_loaded = function (element) {

                         logElementEvent("üëç LOADED", element);
                 };
                 var callback_error = function (element) {
                         logElementEvent("üíÄ ERROR", element);
                         element.src =
                                 "https://via.placeholder.com/440x560/?text=Error+Placeholder";
                 };
                 var callback_finish = function () {
                        element.style.visibility = "none";

                         logElementEvent("‚úîÔ∏è FINISHED", document.documentElement);
                 };

                 var ll = new LazyLoad({
                         elements_selector: ".lazy",
                         // Assign the callbacks defined above
                         callback_enter: callback_enter,
                         callback_exit: callback_exit,
                         callback_reveal: callback_reveal,
                         callback_loaded: callback_loaded,
                         callback_error: callback_error,
                         callback_finish: callback_finish
                 });
         })();
 </script>

 <style>
 .content {
        display: flex;

        flex-direction: row;

        width: 100%;

        align-content: center;

        overflow: hidden;

        height: 92vh;

        margin: 0;

        border-width: 0;
}

body {
        margin: 0;
}

.button {
        font-size: 18px;
}

.file {
        width: 280px;

        height: 280px;

        flex-shrink: 0;

        display: flex;

        flex-direction: column;

        text-align: center;

        padding: 0;

        border-width: 1px;

        background-color: transparent;

        border-color: transparent;

        white-space: nowrap;

        overflow: hidden;

        text-overflow: ellipsis;
}

.selected {
        border-style: solid !important;
        border-color: lightblue !important;
        border-width: 4px;
}

* {
        box-sizing: border-box;
}

.files {
        overflow: auto;

        margin-right: 1rem;
        margin-left: 1rem;

        flex-shrink: 0;

        flex-wrap: wrap;

        width: auto;

        flex: auto;

        display: flex;

        flex-direction: row;
}

.file-preview {
        height: 256px;

        width: 256px;

        object-fit: scale-down;

        border-width: 1px;

        border-color: black;

        padding: 3px;
}

.tools {
        background-color: lightblue;

        padding: 1rem;

        width: 17rem;

        display: flex;

        flex-direction: column;
}

.tooltoggle {
        display: none;
}

.tool-form {
        display: flex;

        flex-direction: column;
}

.toolset {
        display: flex;

        flex-direction: column;
}

.togglebar {
        background-color: lightgray;
        width: 100%;
        height: 8vh;
}

.previous {
        width: auto;
        height: 8vh;
}

@media only screen and (max-width: 600px) {
        .files {
                flex-direction: row;

                width: 100vw;

                overflow: -moz-scrollbars-none;

                -ms-overflow-style: none;
        }

        .files::-webkit-scrollbar {
                width: 0 !important;
        }

        .togglebar {
                display: flex;

                flex-direction: row;

                width: 100vw;

                height: 10vh;

                margin: 0;
        }

        .tooltoggle {
                background-color: white;

                border-style: none;

                display: block;

                flex: auto;

                width: auto;

                height: 10vh;
        }

        .toolset {
                display: none;

                background-color: lightgray;

                height: 90vh;

                width: 100vw;

                padding: 12px;
        }

        .file {
                width: 100%;
                height: unset;
        }

        .file-preview {
                height: unset;
                width: 100%;
        }

        .tools {
                background-color: transparent;

                position: absolute;

                left: 0;

                top: 10vh;
                padding: 0;
        }

        .content {
                height: 90vh;
                flex-direction: row;
        }

        .previous {
                height: 10vh;
                width: 10vh;
        }

        * {
                font-size: 18px;
        }
}
 </style>